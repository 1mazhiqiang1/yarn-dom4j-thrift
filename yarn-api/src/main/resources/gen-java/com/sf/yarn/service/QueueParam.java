/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sf.yarn.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-20")
public class QueueParam implements org.apache.thrift.TBase<QueueParam, QueueParam._Fields>, java.io.Serializable, Cloneable, Comparable<QueueParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueueParam");

  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("minResources", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResources", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_RUNNING_APPS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRunningApps", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueueParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueueParamTupleSchemeFactory();

  public java.lang.String queueName; // required
  public java.lang.String minResources; // required
  public java.lang.String maxResources; // required
  public java.lang.String maxRunningApps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUEUE_NAME((short)1, "queueName"),
    MIN_RESOURCES((short)2, "minResources"),
    MAX_RESOURCES((short)3, "maxResources"),
    MAX_RUNNING_APPS((short)4, "maxRunningApps");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_NAME
          return QUEUE_NAME;
        case 2: // MIN_RESOURCES
          return MIN_RESOURCES;
        case 3: // MAX_RESOURCES
          return MAX_RESOURCES;
        case 4: // MAX_RUNNING_APPS
          return MAX_RUNNING_APPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("minResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("maxResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_RUNNING_APPS, new org.apache.thrift.meta_data.FieldMetaData("maxRunningApps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueueParam.class, metaDataMap);
  }

  public QueueParam() {
  }

  public QueueParam(
    java.lang.String queueName,
    java.lang.String minResources,
    java.lang.String maxResources,
    java.lang.String maxRunningApps)
  {
    this();
    this.queueName = queueName;
    this.minResources = minResources;
    this.maxResources = maxResources;
    this.maxRunningApps = maxRunningApps;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueueParam(QueueParam other) {
    if (other.isSetQueueName()) {
      this.queueName = other.queueName;
    }
    if (other.isSetMinResources()) {
      this.minResources = other.minResources;
    }
    if (other.isSetMaxResources()) {
      this.maxResources = other.maxResources;
    }
    if (other.isSetMaxRunningApps()) {
      this.maxRunningApps = other.maxRunningApps;
    }
  }

  public QueueParam deepCopy() {
    return new QueueParam(this);
  }

  @Override
  public void clear() {
    this.queueName = null;
    this.minResources = null;
    this.maxResources = null;
    this.maxRunningApps = null;
  }

  public java.lang.String getQueueName() {
    return this.queueName;
  }

  public QueueParam setQueueName(java.lang.String queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  public java.lang.String getMinResources() {
    return this.minResources;
  }

  public QueueParam setMinResources(java.lang.String minResources) {
    this.minResources = minResources;
    return this;
  }

  public void unsetMinResources() {
    this.minResources = null;
  }

  /** Returns true if field minResources is set (has been assigned a value) and false otherwise */
  public boolean isSetMinResources() {
    return this.minResources != null;
  }

  public void setMinResourcesIsSet(boolean value) {
    if (!value) {
      this.minResources = null;
    }
  }

  public java.lang.String getMaxResources() {
    return this.maxResources;
  }

  public QueueParam setMaxResources(java.lang.String maxResources) {
    this.maxResources = maxResources;
    return this;
  }

  public void unsetMaxResources() {
    this.maxResources = null;
  }

  /** Returns true if field maxResources is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResources() {
    return this.maxResources != null;
  }

  public void setMaxResourcesIsSet(boolean value) {
    if (!value) {
      this.maxResources = null;
    }
  }

  public java.lang.String getMaxRunningApps() {
    return this.maxRunningApps;
  }

  public QueueParam setMaxRunningApps(java.lang.String maxRunningApps) {
    this.maxRunningApps = maxRunningApps;
    return this;
  }

  public void unsetMaxRunningApps() {
    this.maxRunningApps = null;
  }

  /** Returns true if field maxRunningApps is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRunningApps() {
    return this.maxRunningApps != null;
  }

  public void setMaxRunningAppsIsSet(boolean value) {
    if (!value) {
      this.maxRunningApps = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((java.lang.String)value);
      }
      break;

    case MIN_RESOURCES:
      if (value == null) {
        unsetMinResources();
      } else {
        setMinResources((java.lang.String)value);
      }
      break;

    case MAX_RESOURCES:
      if (value == null) {
        unsetMaxResources();
      } else {
        setMaxResources((java.lang.String)value);
      }
      break;

    case MAX_RUNNING_APPS:
      if (value == null) {
        unsetMaxRunningApps();
      } else {
        setMaxRunningApps((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_NAME:
      return getQueueName();

    case MIN_RESOURCES:
      return getMinResources();

    case MAX_RESOURCES:
      return getMaxResources();

    case MAX_RUNNING_APPS:
      return getMaxRunningApps();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_NAME:
      return isSetQueueName();
    case MIN_RESOURCES:
      return isSetMinResources();
    case MAX_RESOURCES:
      return isSetMaxResources();
    case MAX_RUNNING_APPS:
      return isSetMaxRunningApps();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QueueParam)
      return this.equals((QueueParam)that);
    return false;
  }

  public boolean equals(QueueParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    boolean this_present_minResources = true && this.isSetMinResources();
    boolean that_present_minResources = true && that.isSetMinResources();
    if (this_present_minResources || that_present_minResources) {
      if (!(this_present_minResources && that_present_minResources))
        return false;
      if (!this.minResources.equals(that.minResources))
        return false;
    }

    boolean this_present_maxResources = true && this.isSetMaxResources();
    boolean that_present_maxResources = true && that.isSetMaxResources();
    if (this_present_maxResources || that_present_maxResources) {
      if (!(this_present_maxResources && that_present_maxResources))
        return false;
      if (!this.maxResources.equals(that.maxResources))
        return false;
    }

    boolean this_present_maxRunningApps = true && this.isSetMaxRunningApps();
    boolean that_present_maxRunningApps = true && that.isSetMaxRunningApps();
    if (this_present_maxRunningApps || that_present_maxRunningApps) {
      if (!(this_present_maxRunningApps && that_present_maxRunningApps))
        return false;
      if (!this.maxRunningApps.equals(that.maxRunningApps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
    if (isSetQueueName())
      hashCode = hashCode * 8191 + queueName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinResources()) ? 131071 : 524287);
    if (isSetMinResources())
      hashCode = hashCode * 8191 + minResources.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxResources()) ? 131071 : 524287);
    if (isSetMaxResources())
      hashCode = hashCode * 8191 + maxResources.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxRunningApps()) ? 131071 : 524287);
    if (isSetMaxRunningApps())
      hashCode = hashCode * 8191 + maxRunningApps.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QueueParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinResources()).compareTo(other.isSetMinResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minResources, other.minResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxResources()).compareTo(other.isSetMaxResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResources, other.maxResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxRunningApps()).compareTo(other.isSetMaxRunningApps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRunningApps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRunningApps, other.maxRunningApps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QueueParam(");
    boolean first = true;

    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      sb.append(this.queueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minResources:");
    if (this.minResources == null) {
      sb.append("null");
    } else {
      sb.append(this.minResources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxResources:");
    if (this.maxResources == null) {
      sb.append("null");
    } else {
      sb.append(this.maxResources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRunningApps:");
    if (this.maxRunningApps == null) {
      sb.append("null");
    } else {
      sb.append(this.maxRunningApps);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueueParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueueParamStandardScheme getScheme() {
      return new QueueParamStandardScheme();
    }
  }

  private static class QueueParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueueParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueueParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queueName = iprot.readString();
              struct.setQueueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minResources = iprot.readString();
              struct.setMinResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxResources = iprot.readString();
              struct.setMaxResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_RUNNING_APPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxRunningApps = iprot.readString();
              struct.setMaxRunningAppsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueueParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeString(struct.queueName);
        oprot.writeFieldEnd();
      }
      if (struct.minResources != null) {
        oprot.writeFieldBegin(MIN_RESOURCES_FIELD_DESC);
        oprot.writeString(struct.minResources);
        oprot.writeFieldEnd();
      }
      if (struct.maxResources != null) {
        oprot.writeFieldBegin(MAX_RESOURCES_FIELD_DESC);
        oprot.writeString(struct.maxResources);
        oprot.writeFieldEnd();
      }
      if (struct.maxRunningApps != null) {
        oprot.writeFieldBegin(MAX_RUNNING_APPS_FIELD_DESC);
        oprot.writeString(struct.maxRunningApps);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueueParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueueParamTupleScheme getScheme() {
      return new QueueParamTupleScheme();
    }
  }

  private static class QueueParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueueParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueueParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueueName()) {
        optionals.set(0);
      }
      if (struct.isSetMinResources()) {
        optionals.set(1);
      }
      if (struct.isSetMaxResources()) {
        optionals.set(2);
      }
      if (struct.isSetMaxRunningApps()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetQueueName()) {
        oprot.writeString(struct.queueName);
      }
      if (struct.isSetMinResources()) {
        oprot.writeString(struct.minResources);
      }
      if (struct.isSetMaxResources()) {
        oprot.writeString(struct.maxResources);
      }
      if (struct.isSetMaxRunningApps()) {
        oprot.writeString(struct.maxRunningApps);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueueParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.queueName = iprot.readString();
        struct.setQueueNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minResources = iprot.readString();
        struct.setMinResourcesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxResources = iprot.readString();
        struct.setMaxResourcesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxRunningApps = iprot.readString();
        struct.setMaxRunningAppsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

